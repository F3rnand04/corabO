
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read/write their own document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow public read for publications, but only the owner can create/update/delete
    match /publications/{publicationId} {
      allow read;
      allow create, update, delete: if request.auth != null && request.resource.data.providerId == request.auth.uid;
    }
    
    // Conversations are private between participants
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }
    
    // Transactions are private between participants
    match /transactions/{transactionId} {
        allow read, write: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }

    // Notifications are private to the user
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Reports can only be created by authenticated users
    match /reports/{reportId} {
        allow create: if request.auth != null;
        // Reading/deleting reports should be an admin-only task, handled by server-side logic
        allow read, update, delete: if false;
    }
    
     // QR sessions are private between participants
    match /qr_sessions/{sessionId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }
    
    // Affiliations can be read by involved parties, but writes are handled server-side
    match /affiliations/{affiliationId} {
        allow read: if request.auth != null && (request.auth.uid == resource.data.providerId || request.auth.uid == resource.data.companyId);
        allow create, update, delete: if false; // Must be done via server actions
    }
  }
}
