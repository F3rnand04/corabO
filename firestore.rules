rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can read/write their own data. Public profiles are readable by anyone.
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId);
    }

    // Publications are public to read, but only owner can write/delete.
    match /publications/{publicationId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.providerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.providerId == request.auth.uid;
    }

    // Transactions can only be read/written by participants.
    match /transactions/{transactionId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

    // Conversations can only be read/written by participants.
    match /conversations/{conversationId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

    // Notifications can only be accessed by the owner.
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Affiliations can be read by participants, created by provider, and written by company.
    match /affiliations/{affiliationId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.providerId || request.auth.uid == resource.data.companyId);
      allow create: if isAuthenticated() && request.resource.data.providerId == request.auth.uid;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.companyId;
    }

    // Reports can be created by any authenticated user.
    match /reports/{reportId} {
        allow create: if isAuthenticated();
        // Read/write access should be limited to admins, which requires custom claims.
        // For MVP, we restrict further access until admin logic is fully implemented.
        allow read, update, delete: if false;
    }

    // QR sessions can be read/written by participants.
    match /qr_sessions/{sessionId} {
      allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

     // Campaigns can be read by anyone, but only owner can write.
    match /campaigns/{campaignId} {
      allow read: if true;
      allow write: if isAuthenticated() && resource.data.providerId == request.auth.uid;
    }
  }
}
