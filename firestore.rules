rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Users can only read/write their own document
    match /users/{userId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Publications are public, but only owner can modify
    match /publications/{publicationId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.auth.uid == resource.data.providerId;
    }
    
    // Transactions can only be read/written by participants
    match /transactions/{transactionId} {
      allow read, create, update: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }
    
    // Conversations can only be read/written by participants
    match /conversations/{conversationId} {
      allow read, create, update: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }

    // Reports can be created by any authenticated user
    match /reports/{reportId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.auth.token.role == 'admin'; // Only admins
    }
    
    // Notifications belong to a user
    match /notifications/{notificationId} {
       allow read, create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
     // QR Sessions can be managed by participants
    match /qr_sessions/{sessionId} {
      allow read, create, update: if request.auth != null && request.auth.uid in resource.data.participantIds;
    }
    
    // Affiliations
    match /affiliations/{affiliationId} {
        allow read, create: if request.auth != null;
        allow update: if request.auth != null; // Simplificado para demo, idealmente sería más granular
    }
    
    // Campaigns
    match /campaigns/{campaignId} {
        allow read: if true;
        allow create, update: if request.auth != null && request.auth.uid == resource.data.providerId;
    }
    
    // Disputes (Admin only)
    match /disputes/{disputeId} {
       allow read, create, update, delete: if request.auth != null && request.auth.token.role == 'admin';
    }
    
    // Live Streams
    match /livestreams/{streamId} {
      allow read: if true;
      allow create, update: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
  }
}
