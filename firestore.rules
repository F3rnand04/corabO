rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    match /publications/{publicationId} {
      allow read: if true;
      allow create, update, delete: if isAuthenticated() && request.auth.uid == resource.data.providerId;
    }

    match /conversations/{conversationId} {
        allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

    match /transactions/{transactionId} {
        allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }
    
    match /reports/{reportId} {
        allow create: if isAuthenticated();
        allow read, write: if false; // Only backend admin access
    }

    match /affiliations/{affiliationId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update: if isAuthenticated(); // More granular checks inside flows
    }

    match /campaigns/{campaignId} {
        allow read: if true;
        allow create, update: if isAuthenticated() && request.auth.uid == resource.data.providerId;
    }

    match /notifications/{notificationId} {
        allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
    }

    match /qr_sessions/{sessionId} {
        allow read, write: if isAuthenticated() && request.auth.uid in resource.data.participantIds;
    }

    match /disputes/{disputeId} {
        allow read, write: if isAuthenticated() && (request.auth.uid == resource.data.clientId || request.auth.uid == resource.data.providerId);
    }
  }
}
