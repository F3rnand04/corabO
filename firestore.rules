rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read/write their own document. Public profiles are handled by flows.
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }
    
    // Anyone can read publications, but only the owner can create/update/delete.
    match /publications/{publicationId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && request.resource.data.providerId == request.auth.uid;
    }
    
    // Transactions can only be read/written by participants.
    match /transactions/{transactionId} {
        allow read, write: if request.auth != null && request.resource.data.participantIds.hasAny([request.auth.uid]);
        allow create: if request.auth != null && request.resource.data.participantIds.hasAny([request.auth.uid]);
    }
    
    // Conversations can only be read/written by participants.
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && resource.data.participantIds.hasAny([request.auth.uid]);
    }

    // Notifications can only be read/written by the recipient.
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Affiliations: complex logic handled by server-side flows (actions).
    // Restrict client-side writes for safety.
    match /affiliations/{affiliationId} {
        allow read: if request.auth != null;
        allow write: if false; // All affiliation logic is server-side.
    }
    
    // Reports can be created by any authenticated user.
    match /reports/{reportId} {
      allow create: if request.auth != null;
      allow read, write: if false; // Reviewed by admins only.
    }
    
    // QR Sessions can be read/written by participants.
    match /qr_sessions/{sessionId} {
      allow read, write: if request.auth != null && resource.data.participantIds.hasAny([request.auth.uid]);
       allow create: if request.auth != null;
    }

    // Default deny all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}