rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if a user is a participant in a document
    function isParticipant(docData) {
      return request.auth.uid in docData.participantIds;
    }

    // Users can only read and update their own profile. Creation is handled by backend.
    match /users/{userId} {
      allow read: if true; // Public profiles are readable
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
    // Publications are public to read, but only the owner can manage them.
    match /publications/{publicationId} {
      allow read: if true;
      allow create, update, delete: if isOwner(resource.data.providerId);
    }
    
    // Transactions can only be read/updated by participants. Creation is backend-driven.
    match /transactions/{transactionId} {
      allow read, update: if isParticipant(resource.data);
      allow create: if request.auth != null;
    }

    // Conversations can only be read/updated by participants.
    match /conversations/{conversationId} {
      allow read, update: if isParticipant(resource.data);
      allow create: if request.auth != null;
    }
    
    // Notifications are private to each user.
    match /notifications/{notificationId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if request.auth != null;
    }
    
    // Affiliations are managed by participants.
    match /affiliations/{affiliationId} {
      allow read, update: if isParticipant(resource.data);
       allow create: if request.auth != null;
    }
    
    // Campaigns can be read publicly, managed by owner.
    match /campaigns/{campaignId} {
        allow read: if true;
        allow create, update: if isOwner(resource.data.providerId);
    }
    
    // Reports can only be created by authenticated users. Reading is admin-only.
     match /reports/{reportId} {
      allow read, update, delete: if false; // Managed by backend rules/admins
      allow create: if request.auth != null;
    }
    
    // Disputes are admin-managed.
    match /disputes/{disputeId} {
        allow read, create, update, delete: if false; // Only backend/admin access
    }
    
    // QR sessions are private to participants.
    match /qr_sessions/{sessionId} {
      allow read, update: if isParticipant(resource.data);
      allow create: if request.auth != null;
    }
    
     // Live streams can be public, managed by creator.
    match /livestreams/{liveStreamId} {
        allow read: if true;
        allow create, update: if isOwner(resource.data.creatorId);
    }
  }
}
