#!/bin/bash

# ===============================================================
# =        CORABO - PIPELINE DE INTEGRACI√ìN CONTINUA            =
# ===============================================================
# Este script unifica el testeo de dependencias, compilaci√≥n y
# funcionalidad para asegurar la estabilidad de la aplicaci√≥n.

echo "üöÄ INICIANDO PIPELINE DE VERIFICACI√ìN COMPLETA DE CORABO üöÄ"
echo "------------------------------------------------------------"

# --- Engranaje 1: Verificaci√≥n de Dependencias y Entorno ---
echo "‚öôÔ∏è  ENGRANAJE 1: Alineando dependencias..."

# 1.1 Verificando gestor de paquetes
echo "  - Buscando gestor de paquetes..."
if command -v npm &> /dev/null; then
    PM="npm"
    INSTALL_CMD="npm install"
elif command -v yarn &> /dev/null; then
    PM="yarn"
    INSTALL_CMD="yarn"
else
    echo "‚ùå Error Cr√≠tico: No se encontr√≥ 'npm' o 'yarn'. Abortando."
    exit 1
fi
echo "  - Gestor de paquetes detectado: $PM"

# 1.2 Verificando e instalando dependencias cr√≠ticas
echo "  - Asegurando que 'next' y 'react-day-picker' est√©n instalados..."
$INSTALL_CMD next@latest react-day-picker

if [ $? -ne 0 ]; then
    echo "‚ùå Error Cr√≠tico: La instalaci√≥n de dependencias fall√≥."
    exit 1
fi
echo "‚úÖ Dependencias cr√≠ticas verificadas y alineadas."
echo "------------------------------------------------------------"


# --- Engranaje 2: Verificaci√≥n de Compilaci√≥n de Producci√≥n ---
echo "‚öôÔ∏è  ENGRANAJE 2: Compilando la aplicaci√≥n..."

npm run build

if [ $? -ne 0 ]; then
    echo "‚ùå Error Cr√≠tico: La compilaci√≥n de producci√≥n (next build) fall√≥."
    echo "   Por favor, revisa los logs de compilaci√≥n para m√°s detalles."
    exit 1
fi
echo "‚úÖ La aplicaci√≥n se compil√≥ correctamente."
echo "------------------------------------------------------------"


# --- Engranaje 3: Pruebas de Funcionalidad (Login y Navegaci√≥n) ---
echo "‚öôÔ∏è  ENGRANAJE 3: Ejecutando pruebas de integraci√≥n..."

MAX_REINTENTOS=3
REINTENTOS=0
TEST_PASSED=false

# L√≥gica de bucle para reintentar en caso de fallos intermitentes
while [ "$TEST_PASSED" = false ] && [ "$REINTENTOS" -lt "$MAX_REINTENTOS" ]; do
    echo "  - ‚ñ∂Ô∏è Ejecutando suite de tests (Intento $((REINTENTOS + 1)))..."
    
    # Ejecutar todos los tests de integraci√≥n con Jest
    # Nota: En un entorno real, la app estar√≠a corriendo en un servidor de pruebas.
    if jest --testPathPattern=tests/integration; then
        echo "  - ‚úÖ Todos los tests de integraci√≥n pasaron."
        TEST_PASSED=true
    else
        echo "  - ‚ùå Fallo en los tests de integraci√≥n."
        REINTENTOS=$((REINTENTOS + 1))
        if [ "$REINTENTOS" -lt "$MAX_REINTENTOS" ]; then
            echo "  - ‚ö†Ô∏è Reintentando en 5 segundos..."
            sleep 5
        fi
    fi
done

if [ "$TEST_PASSED" = false ]; then
    echo "‚ùå Error Cr√≠tico: Las pruebas de integraci√≥n fallaron repetidamente."
    echo "   La aplicaci√≥n tiene un error de ejecuci√≥n (posiblemente de login o carga perpetua)."
    exit 1
fi

echo "‚úÖ Pruebas de funcionalidad verificadas."
echo "------------------------------------------------------------"


# --- Reporte Final ---
echo "üéâ ¬°√âXITO TOTAL! üéâ"
echo "Todos los engranajes (Dependencias, Compilaci√≥n, Funcionalidad) est√°n perfectamente alineados."
echo "La aplicaci√≥n est√° estable y lista para ser desplegada."
exit 0
